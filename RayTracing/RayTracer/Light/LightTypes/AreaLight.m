//
//  AreaLight.m
//  Ray tracing
//
//  Created by Fabrizio Duroni on 29/07/15.
//  Copyright (c) 2015 Fabrizio Duroni. All rights reserved.
//

#import "Constants.h"
#import "Sphere.h"
#import "Point3D.h"
#import "Vector3D.h"
#import "AreaLight.h"

@interface AreaLight ()

/// Radius of the sphere area used to simulate an area light.
@property (nonatomic, assign) float radius;
/// Sphere used to simulate the area of the light.
@property (nonatomic, strong) Sphere *lightSphere;

@end

@implementation AreaLight

- (instancetype)initWithOrigin:(Point3D *) origin andColor:(Vector3D *)color andRadius:(float)radius {

    self = [super initWithOrigin:origin andColor:color];
    
    if (self) {

        //Setup drand48 seed.
        //drand48 return a number between 0 and 1.
        srand48(time(0));
        
        //Light setup.
        self.radius = radius;
        
        //Sphere used as area light setup.
        self.lightSphere = [[Sphere alloc]init];
        self.lightSphere.center = self.origin;
        self.lightSphere.radius = self.radius;
        
        [self generateRandomLightPositionOnSphere];
    }
    
    return self;
}

#pragma mark Random points generation

/*!
 Method used to generate random unit vector.
 This vectors are used to generate random 
 points on the sphere area light.
 
 @see http://mathworld.wolfram.com/SpherePointPicking.html
 @see Graphics gems vol. III
 @see http://stackoverflow.com/questions/13775510/soft-shadows-spherical-area-light-source
*/
- (Vector3D *)generateRandomSphereUnitVector {

    //Generate random theta.
    double theta = drand48() * 2.0 * M_PI;
    
    //Generate random x.
    double x = (drand48() * 2.0) - 1.0;
    
    //A uniformly distributed point can be generated by
    //choosing z uniformly distributed on –1 to +1, and
    //x and y uniformly distributed on a circle of
    //sqrt(radius 1 – z^2). Graphics gem III pag. 126.
    double circleRadius = sqrt(1.0 - pow(x, 2));
    
    //Create random vector.
    Vector3D *randomUnitVector = [[Vector3D alloc] initX:x Y:circleRadius * cos(theta) Z:circleRadius * sin(theta)];
    
    return randomUnitVector;
}

/*!
 Method used to generate random points on the sphere
 used as light area.
 */
- (void)generateRandomLightPositionOnSphere {

    self.randomSpherePoints = [[NSMutableArray alloc] initWithCapacity:numberOfShadowRay];
    
    for (int i = 0; i < numberOfShadowRay; i++) {
    
        Vector3D *randomUnitVector = [self generateRandomSphereUnitVector];
        Point3D *randomPointOnSphere = [self.lightSphere.center sumVector:[randomUnitVector productWithScalar:self.radius]];
        [self.randomSpherePoints insertObject:randomPointOnSphere atIndex:i];
    }
}

@end